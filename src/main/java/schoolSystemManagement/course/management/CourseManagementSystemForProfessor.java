/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolSystemManagement.course.management;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import schoolSystemManagement.course.management.dto.CourseData;
import schoolSystemManagement.course.management.dto.UserData;
import schoolSystemManagement.course.management.json.JsonFile;
import org.json.JSONObject;

import javax.swing.*;
import java.util.ArrayList;

public class CourseManagementSystemForProfessor extends javax.swing.JFrame {
    
    // 현제 본인의 정보를 받아와서 저장한다.
    public String professorName = "이선권"; //TODO: 수정 해당 부분만 동적으로 받아오면 됩니다.
    public String professorId = "P-908"; //TODO: 중복된 이름이 있을 수 있기에 id로 피싱합니다.
    JsonFile usersFile = new JsonFile("user_data.json", "user_data.json");
    JsonFile coursesFile = new JsonFile("course_data.json", "course_data.json");

    /**
     * Creates new form CourseManagementSystemForProfessor
     */
    public CourseManagementSystemForProfessor() {
        initComponents();
        setTitle("[교수] 수강 관리 시스템");
        setSize(860,560);
        // 크기 조정 완전 금지
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 추가로 크기 조정 이벤트 리스너 제거
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 크기 변경 무시
                setSize(860, 560);
            }
        });
        panel_professorCourseManagement.setVisible(false);
        
    }
    public CourseManagementSystemForProfessor(String professorName, String professorId) {
        this.professorName = professorName;
        this.professorId = professorId;
        initComponents();
        setTitle("[교수] 수강 관리 시스템");
        setSize(860,560);
        // 크기 조정 완전 금지
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 추가로 크기 조정 이벤트 리스너 제거
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 크기 변경 무시
                setSize(860, 560);
            }
        });
        panel_professorCourseManagement.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_professorCourseList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProfessorCloseCourseList = new javax.swing.JList<>();
        courseNameFromProfessor = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProfessorOpenCourseList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        goCourseManagement = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        explainProfessorCourseList = new javax.swing.JTextArea();
        professorNameFrame = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        professorIdFrame = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        panel_professorCourseManagement = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        students = new javax.swing.JList<>();
        unitFrame = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        maxStudentsFrame = new javax.swing.JTextField();
        countStudentsFrame = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        CourseNameFrame = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        professorFrame = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        goProfessorCourseList = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        exmplainCourseManagement = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        selectStudentNameFrame = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        selectUnitScore = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        selectStudentNumberFrame = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        selectStudentMajorFrame = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel_professorCourseList.setBackground(new java.awt.Color(255, 255, 255));

        ProfessorCloseCourseList.setBackground(new java.awt.Color(255, 255, 255));
        ProfessorCloseCourseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ProfessorCloseCourseList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ProfessorCloseCourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ProfessorCloseCourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(ProfessorCloseCourseList);

        courseNameFromProfessor.setBackground(new java.awt.Color(255, 255, 255));
        courseNameFromProfessor.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                courseNameFromProfessorAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        courseNameFromProfessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseNameFromProfessorActionPerformed(evt);
            }
        });

        ProfessorOpenCourseList.setBackground(new java.awt.Color(255, 255, 255));
        ProfessorOpenCourseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ProfessorOpenCourseList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ProfessorOpenCourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ProfessorOpenCourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        ProfessorOpenCourseList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ProfessorOpenCourseListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(ProfessorOpenCourseList);

        jLabel1.setText("개설 된 강의 목록");

        jLabel2.setText("개설 되지 않은 강의 목록");

        jLabel3.setText("선택한 강의 이름");

        goCourseManagement.setBackground(new java.awt.Color(255, 255, 255));
        goCourseManagement.setText("관리하기");
        goCourseManagement.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goCourseManagement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goCourseManagementActionPerformed(evt);
            }
        });

        explainProfessorCourseList.setBackground(new java.awt.Color(255, 255, 255));
        explainProfessorCourseList.setColumns(20);
        explainProfessorCourseList.setRows(5);
        explainProfessorCourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                explainProfessorCourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane5.setViewportView(explainProfessorCourseList);

        professorNameFrame.setBackground(new java.awt.Color(255, 255, 255));
        professorNameFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                professorNameFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel14.setText("교수 이름");

        professorIdFrame.setBackground(new java.awt.Color(255, 255, 255));
        professorIdFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                professorIdFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel15.setText("교수 아이디");

        javax.swing.GroupLayout panel_professorCourseListLayout = new javax.swing.GroupLayout(panel_professorCourseList);
        panel_professorCourseList.setLayout(panel_professorCourseListLayout);
        panel_professorCourseListLayout.setHorizontalGroup(
            panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_professorCourseListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(panel_professorCourseListLayout.createSequentialGroup()
                        .addGroup(panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseNameFromProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, 711, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goCourseManagement, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE))
                    .addGroup(panel_professorCourseListLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel_professorCourseListLayout.createSequentialGroup()
                        .addGroup(panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_professorCourseListLayout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(professorNameFrame))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15)
                            .addComponent(professorIdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panel_professorCourseListLayout.setVerticalGroup(
            panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_professorCourseListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_professorCourseListLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(professorNameFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_professorCourseListLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(professorIdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_professorCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseNameFromProfessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goCourseManagement))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        panel_professorCourseManagement.setBackground(new java.awt.Color(255, 255, 255));
        panel_professorCourseManagement.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                panel_professorCourseManagementAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        students.setBackground(new java.awt.Color(255, 255, 255));
        students.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        students.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        students.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                studentsAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        students.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(students);

        unitFrame.setBackground(new java.awt.Color(255, 255, 255));
        unitFrame.setText("강의 학점");
        unitFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                unitFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel4.setText("현재 수강 중인 학생");

        jLabel5.setText("강의 학점");

        maxStudentsFrame.setBackground(new java.awt.Color(255, 255, 255));
        maxStudentsFrame.setText("최대 수강 인원");
        maxStudentsFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                maxStudentsFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        countStudentsFrame.setBackground(new java.awt.Color(255, 255, 255));
        countStudentsFrame.setText("현재 수강 인원");
        countStudentsFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                countStudentsFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel7.setText("현재 수강 인원");

        CourseNameFrame.setBackground(new java.awt.Color(255, 255, 255));
        CourseNameFrame.setText("강의 이름");
        CourseNameFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                CourseNameFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel8.setText("최대 수강 인원");

        jLabel9.setText("강의 이름");

        professorFrame.setBackground(new java.awt.Color(255, 255, 255));
        professorFrame.setText("담당 교수 이름");
        professorFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                professorFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        professorFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                professorFrameActionPerformed(evt);
            }
        });

        jLabel10.setText("교수 이름");

        goProfessorCourseList.setBackground(new java.awt.Color(255, 255, 255));
        goProfessorCourseList.setText("목록으로 돌아가기");
        goProfessorCourseList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goProfessorCourseList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goProfessorCourseListActionPerformed(evt);
            }
        });

        exmplainCourseManagement.setBackground(new java.awt.Color(255, 255, 255));
        exmplainCourseManagement.setColumns(20);
        exmplainCourseManagement.setRows(5);
        exmplainCourseManagement.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                exmplainCourseManagementAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane4.setViewportView(exmplainCourseManagement);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("저장");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        selectStudentNameFrame.setBackground(new java.awt.Color(255, 255, 255));
        selectStudentNameFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                selectStudentNameFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel6.setText("학생 이름");

        selectUnitScore.setBackground(new java.awt.Color(255, 255, 255));
        selectUnitScore.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectUnitScore.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        selectUnitScore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectUnitScoreActionPerformed(evt);
            }
        });

        jLabel11.setText("학점 입력");

        jLabel12.setText("학번");

        selectStudentNumberFrame.setBackground(new java.awt.Color(255, 255, 255));
        selectStudentNumberFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                selectStudentNumberFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel13.setText("학과");

        selectStudentMajorFrame.setBackground(new java.awt.Color(255, 255, 255));
        selectStudentMajorFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                selectStudentMajorFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        selectStudentMajorFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectStudentMajorFrameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_professorCourseManagementLayout = new javax.swing.GroupLayout(panel_professorCourseManagement);
        panel_professorCourseManagement.setLayout(panel_professorCourseManagementLayout);
        panel_professorCourseManagementLayout.setHorizontalGroup(
            panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())
                    .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                        .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_professorCourseManagementLayout.createSequentialGroup()
                                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(CourseNameFrame, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_professorCourseManagementLayout.createSequentialGroup()
                                        .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(unitFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(countStudentsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(maxStudentsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(professorFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(goProfessorCourseList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectUnitScore, 0, 360, Short.MAX_VALUE)
                                    .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_professorCourseManagementLayout.createSequentialGroup()
                                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(selectStudentMajorFrame, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectStudentNameFrame, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectStudentNumberFrame, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel_professorCourseManagementLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(6, 6, 6))
                            .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel13))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        panel_professorCourseManagementLayout.setVerticalGroup(
            panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_professorCourseManagementLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goProfessorCourseList)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectStudentNumberFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectStudentNameFrame, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CourseNameFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(professorFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_professorCourseManagementLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectStudentMajorFrame)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_professorCourseManagementLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(unitFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maxStudentsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(countStudentsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectUnitScore))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setText("메뉴");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_professorCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel_professorCourseManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_professorCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel_professorCourseManagement, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void courseNameFromProfessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseNameFromProfessorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_courseNameFromProfessorActionPerformed

    private void ProfessorOpenCourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ProfessorOpenCourseListAncestorAdded
        JSONObject filteredObjects = coursesFile.getAllObjectsByKeyValue("status", "true");

        ArrayList<CourseData> courseDataList = new ArrayList<>();

        // 반복하여 필터링된 객체의 특정 속성을 출력
        for (String key : filteredObjects.keySet()) {
            JSONObject course = filteredObjects.getJSONObject(key);

            // 원하는 속성 출력
            String name = course.optString("name", "N/A");
            int maxStudents = course.optInt("maxStudents", 0);
            String professor = course.optString("professor", "N/A");
            int unit = course.optInt("unit", 0);
            String userId = course.optString("userId", "N/A");

            // 결과를 DTO 객체로 만들어 ArrayList에 저장
            CourseData courseDTO = new CourseData(name, professor, maxStudents, unit, userId);
            courseDataList.add(courseDTO);
        }

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (CourseData value : courseDataList) {
            if (value.getUserId().equals(professorId)){
                listModel.addElement(value.getName());
            }
        }

        // JList에 모델 설정
        ProfessorOpenCourseList.setModel(listModel);

        // 읽기 전용으로 설정
        courseNameFromProfessor.setEditable(false);  // 입력 불가
    }//GEN-LAST:event_ProfessorOpenCourseListAncestorAdded

    private void ProfessorOpenCourseListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ProfessorOpenCourseListValueChanged
        String selectedCourseName = ProfessorOpenCourseList.getSelectedValue();

            if (selectedCourseName != null) {
                // 선택된 과목 이름을 CourseName 텍스트 영역에 출력
                courseNameFromProfessor.setText(selectedCourseName);
            }
        // 읽기 전용으로 설정
        courseNameFromProfessor.setEnabled(false);  // 입력 불가
    }//GEN-LAST:event_ProfessorOpenCourseListValueChanged

    private void goCourseManagementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goCourseManagementActionPerformed
        // 텍스트 필드가 비어있거나 null일 경우 예외 처리
        if (courseNameFromProfessor.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "개설 된 강의 목록에서 교과목을 선택 해 주세요.");
            return;
        }
        
        int result = JOptionPane.showConfirmDialog(null, "정말로 이동하시겠습니까?", "확인", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            panel_professorCourseList.setVisible(false);
            panel_professorCourseManagement.setVisible(true);
            revalidate();  // UI 갱신
            repaint();     // 다시 그리기
        } else {
            // NO를 클릭한 경우
            return;
        }
    }//GEN-LAST:event_goCourseManagementActionPerformed

    private void professorFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_professorFrameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_professorFrameActionPerformed

    private void goProfessorCourseListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goProfessorCourseListActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "정말로 이동하시겠습니까?", "확인", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            panel_professorCourseList.setVisible(true);
            panel_professorCourseManagement.setVisible(false);
            revalidate();  // UI 갱신
            repaint();     // 다시 그리기
        } else {
            // NO를 클릭한 경우
            return;
        }
    }//GEN-LAST:event_goProfessorCourseListActionPerformed

    private void exmplainCourseManagementAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_exmplainCourseManagementAncestorAdded
        // 읽기 전용으로 설정
        exmplainCourseManagement.setText("아래의 학생 목록에서 학생을 선택하여 성적 수정이 가능합니다.\n - 성적은 A, B, C, D, F 입력 가능합니다.\n - 성적 저장시 4.0(A), 3,0(B), 2.0(C) 1.0(D), 0.0(F) 로 저장됩니다.");
        exmplainCourseManagement.setEnabled(false);  // 입력 불가
    }//GEN-LAST:event_exmplainCourseManagementAncestorAdded

    private void panel_professorCourseManagementAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_panel_professorCourseManagementAncestorAdded
        String courseNameData = courseNameFromProfessor.getText();
        CourseNameFrame.setText(courseNameData);
        
        String professorData = coursesFile.getUserValueByStandardKey("name", courseNameData , "professor").toString();
        professorFrame.setText(professorData);
        
        String courseUnitData = coursesFile.getUserValueByStandardKey("name", courseNameData, "unit").toString();
        unitFrame.setText(courseUnitData);
        
        String countStudentsData = coursesFile.getUserValueByStandardKey("name", courseNameData, "countStudents").toString();
        countStudentsFrame.setText(countStudentsData);
        
        String maxStudentsData = coursesFile.getUserValueByStandardKey("name", courseNameData, "maxStudents").toString();
        maxStudentsFrame.setText(maxStudentsData);
        
        
        // 성적 선택 박스 기존 값 초기화
        selectUnitScore.removeAllItems();

        // 새로운 값 추가 및 기본값 설정
        selectUnitScore.addItem("default");
        selectUnitScore.addItem("F");
        selectUnitScore.addItem("D");
        selectUnitScore.addItem("C");
        selectUnitScore.addItem("B");
        selectUnitScore.addItem("A");
        selectUnitScore.setSelectedIndex(0);
        
        // 읽기 전용으로 설정
        selectStudentNumberFrame.setEnabled(false);  // 입력 불가
        selectStudentNameFrame.setEnabled(false);  // 입력 불가
        selectStudentMajorFrame.setEnabled(false);  // 입력 불가
        CourseNameFrame.setEnabled(false);  // 입력 불가
        professorFrame.setEnabled(false); // 입력 불가
        unitFrame.setEnabled(false); // 입력 불가
        countStudentsFrame.setEnabled(false); // 입력 불가
        maxStudentsFrame.setEnabled(false); // 입력 불가
    }//GEN-LAST:event_panel_professorCourseManagementAncestorAdded

    private void selectUnitScoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectUnitScoreActionPerformed

    }//GEN-LAST:event_selectUnitScoreActionPerformed

    private void studentsAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_studentsAncestorAdded
        // 텍스트 필드에서 입력받은 강의 이름
        String courseNameData = courseNameFromProfessor.getText();

        // courseNameData와 일치하는 강의를 필터링하여 JSON 객체 가져오기
        Object[] filteredObjects = usersFile.getAllJsonObjectWhereTargetKeyValue("courseList", "course", courseNameData);

        // ArrayList에 CourseData 객체 저장
        ArrayList<UserData> userDataList = new ArrayList<>();

        // 필터링된 객체가 없는 경우 처리
        if (filteredObjects.length == 0) {
            // JList에 "학생이 존재하지 않습니다." 메시지 추가
            DefaultListModel<String> emptyModel = new DefaultListModel<>();
            emptyModel.addElement("학생이 존재하지 않습니다.");
            students.setModel(emptyModel);
            return;  // 더 이상 진행하지 않음
        }

        // 반복하여 필터링된 객체의 특정 속성을 추출하고, DTO 객체로 변환하여 리스트에 저장
        for (Object obj : filteredObjects) {
            JSONObject course = (JSONObject) obj;

            // 원하는 속성 추출
            String name = course.optString("name", "N/A");
            String userId = course.optString("userId", "N/A");
            String major = course.optString("major", "N/A");
            String number = course.optString("number", "N/A");

            // 결과를 DTO 객체로 만들어 ArrayList에 저장
            UserData userDTO = new UserData(name, userId, number, major);
            userDataList.add(userDTO);
        }

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();

        // courseDataList에서 강의 이름을 가져와 JList에 추가
        for (UserData value : userDataList) {
            listModel.addElement("이름: " + value.getName() + "    학과: " + value.getMajor() + "    userId: " + value.getUserId());
        }

        // JList에 모델 설정
        students.setModel(listModel);
    }//GEN-LAST:event_studentsAncestorAdded

    private void studentsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_studentsValueChanged
        String courseNameData = CourseNameFrame.getText();
        // 리스트에서 선택한 부분의 문자열을 가져온다.
        String selectedStudentNameAndNumber = students.getSelectedValue();

        // fullString이 null인 경우, 즉 선택된 값이 없을 때 처리
        if (selectedStudentNameAndNumber == null) {
            return;  // 종료
        }

        String fullString = selectedStudentNameAndNumber;

        // 공백을 기준으로 문자열을 나눕니다. (주어진 구분자 "    "을 기준으로 나누기)
        String[] parts = fullString.split("    ");  // 공백 4개를 기준으로 분리

        // 배열의 길이가 4가 아닌 경우, 즉 필요한 데이터가 없다면 종료
        if (parts.length < 3) {
            JOptionPane.showMessageDialog(this, "선택된 학생 데이터가 올바르지 않습니다. 다시 선택해주세요.");
            return;  // 종료
        }

        // 각 항목을 분리하여 변수에 저장
        String name = parts[0].replace("이름: ", "").trim();  // 이름
        String major = parts[1].replace("학과:", "").trim();  // 학과
        String userId = parts[2].replace("userId:", "").trim(); // userId

        // 필수 데이터가 없다면 종료
        if (name.isEmpty() || major.isEmpty() || userId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "학생의 이름, 학과, 또는 userId가 누락되었습니다.");
            return;  // 종료
        }

        selectStudentNumberFrame.setText(userId);
        selectStudentNameFrame.setText(name);
        selectStudentMajorFrame.setText(major);

        // 점수를 가져오는 부분
        double score = Double.parseDouble(usersFile.getJsonArrayValue("userId", userId, "courseList", "course", courseNameData, "score").toString());

        if (score == 0.0) {
            selectUnitScore.setSelectedIndex(1);
        } else if (score == 1.0) {
            selectUnitScore.setSelectedIndex(2);
        } else if (score == 2.0) {
            selectUnitScore.setSelectedIndex(3);
        } else if (score == 3.0) {
            selectUnitScore.setSelectedIndex(3);
        } else if (score == 4.0) {
            selectUnitScore.setSelectedIndex(5);
        } else {
            selectUnitScore.setSelectedIndex(0);
        }

        // 필드 비활성화
        selectStudentNumberFrame.setEnabled(false);  // 입력 불가
        selectStudentNameFrame.setEnabled(false);  // 입력 불가
        selectStudentMajorFrame.setEnabled(false);  // 입력 불가
        CourseNameFrame.setEnabled(false);  // 입력 불가
        professorFrame.setEnabled(false); // 입력 불가
        unitFrame.setEnabled(false); // 입력 불가
        countStudentsFrame.setEnabled(false); // 입력 불가
        maxStudentsFrame.setEnabled(false); // 입력 불가
    }//GEN-LAST:event_studentsValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String score = (String) selectUnitScore.getSelectedItem();
        String courseNameData = courseNameFromProfessor.getText();
        String userIdData = selectStudentNumberFrame.getText();
        String nameData = selectStudentNameFrame.getText();
        String majorData = selectStudentMajorFrame.getText();

        // 값이 null이면 알림창 띄우고 종료
        if (score.isEmpty() || courseNameData.isEmpty() || userIdData.isEmpty() || nameData.isEmpty() || majorData.isEmpty()) {
            JOptionPane.showMessageDialog(this, "학생 목록에서 학생을 선택 해 주세요.");
            return; // 메서드 종료
        }

        if(score.equals("A")){
            int result = JOptionPane.showConfirmDialog(null, "점수를 저장하시겠습니까?", "확인", JOptionPane.YES_NO_CANCEL_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                usersFile.setJsonArrayValue("userId", userIdData, "courseList", "course", courseNameData, "score", 4.0);
                JOptionPane.showMessageDialog(this, "성공적으로 저장되었습니다.");
            } else if (result == JOptionPane.NO_OPTION) { }
            else if (result == JOptionPane.CANCEL_OPTION) { }
        } else if(score.equals("B")){
            int result = JOptionPane.showConfirmDialog(null, "입력한 학점를 저장하시겠습니까?", "확인", JOptionPane.YES_NO_CANCEL_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                usersFile.setJsonArrayValue("userId", userIdData, "courseList", "course", courseNameData, "score", 3.0);
                JOptionPane.showMessageDialog(this, "성공적으로 저장되었습니다.");
            } else if (result == JOptionPane.NO_OPTION) { }
            else if (result == JOptionPane.CANCEL_OPTION) { }
        } else if(score.equals("C")){
            int result = JOptionPane.showConfirmDialog(null, "입력한 학점를 저장하시겠습니까?", "확인", JOptionPane.YES_NO_CANCEL_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                usersFile.setJsonArrayValue("userId", userIdData, "courseList", "course", courseNameData, "score", 2.0);
                JOptionPane.showMessageDialog(this, "성공적으로 저장되었습니다.");
            } else if (result == JOptionPane.NO_OPTION) { }
            else if (result == JOptionPane.CANCEL_OPTION) { }
        } else if(score.equals("D")){
            int result = JOptionPane.showConfirmDialog(null, "입력한 학점를 저장하시겠습니까?", "확인", JOptionPane.YES_NO_CANCEL_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                usersFile.setJsonArrayValue("userId", userIdData, "courseList", "course", courseNameData, "score", 1.0);
                JOptionPane.showMessageDialog(this, "성공적으로 저장되었습니다.");
            } else if (result == JOptionPane.NO_OPTION) { }
            else if (result == JOptionPane.CANCEL_OPTION) { }
        } else if(score.equals("F")){
            int result = JOptionPane.showConfirmDialog(null, "입력한 학점를 저장하시겠습니까?", "확인", JOptionPane.YES_NO_CANCEL_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                usersFile.setJsonArrayValue("userId", userIdData, "courseList", "course", courseNameData, "score", 0.0);
                JOptionPane.showMessageDialog(this, "성공적으로 저장되었습니다.");
            } else if (result == JOptionPane.NO_OPTION) { }
            else if (result == JOptionPane.CANCEL_OPTION) { }
        } else {
            int result = JOptionPane.showConfirmDialog(null, "비 정상적인 값이 들어있습니다.\n그래도 저장하시겠습니까?", "확인", JOptionPane.YES_NO_CANCEL_OPTION);

            if (result == JOptionPane.YES_OPTION) {
                usersFile.setJsonArrayValue("userId", userIdData, "courseList", "course", courseNameData, "score", 0.0);
                JOptionPane.showMessageDialog(this, "성공적으로 저장되었습니다.");
            } else if (result == JOptionPane.NO_OPTION) { }
            else if (result == JOptionPane.CANCEL_OPTION) { }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ProfessorCloseCourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ProfessorCloseCourseListAncestorAdded
        JSONObject filteredObjects = coursesFile.getAllObjectsByKeyValue("status", "false");

        ArrayList<CourseData> courseDataList = new ArrayList<>();

        // 반복하여 필터링된 객체의 특정 속성을 출력
        for (String key : filteredObjects.keySet()) {
            JSONObject course = filteredObjects.getJSONObject(key);

            // 원하는 속성 출력
            String name = course.optString("name", "N/A");
            int maxStudents = course.optInt("maxStudents", 0);
            String professor = course.optString("professor", "N/A");
            int unit = course.optInt("unit", 0);
            String userId = course.optString("userId", "N/A");

            // 결과를 DTO 객체로 만들어 ArrayList에 저장
            CourseData courseDTO = new CourseData(name, professor, maxStudents, unit, userId);
            courseDataList.add(courseDTO);
        }

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (CourseData value : courseDataList) {
            if (value.getUserId().equals(professorId)){
                listModel.addElement(value.getName());
            }
        }

        // JList에 모델 설정
        ProfessorCloseCourseList.setModel(listModel);

        // 읽기 전용으로 설정
        courseNameFromProfessor.setEnabled(false);  // 입력 불가
        ProfessorCloseCourseList.setEnabled(false);
    }//GEN-LAST:event_ProfessorCloseCourseListAncestorAdded

    private void explainProfessorCourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_explainProfessorCourseListAncestorAdded
        explainProfessorCourseList.setText("아래의 개설 된 교과목 목록에서 학생을 선택하여 성적 관리가 가능합니다.\n - 개설 된 과목중 선택하여 관리 할 수 있습니다.\n - 개설 되지 않은 과목을 선택해도 기존의 개설된 과목 선택 정보로 진행 됩니다.");
        // 읽기 전용으로 설정
        explainProfessorCourseList.setEnabled(false);  // 입력 불가
    }//GEN-LAST:event_explainProfessorCourseListAncestorAdded

    private void professorNameFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_professorNameFrameAncestorAdded
        professorNameFrame.setText(professorName);

        // 필드 비활성화
        professorNameFrame.setEnabled(false);
    }//GEN-LAST:event_professorNameFrameAncestorAdded

    private void professorIdFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_professorIdFrameAncestorAdded
        professorIdFrame.setText(professorId);

        // 필드 비활성화
        professorIdFrame.setEnabled(false);
    }//GEN-LAST:event_professorIdFrameAncestorAdded

    private void courseNameFromProfessorAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_courseNameFromProfessorAncestorAdded
        courseNameFromProfessor.setEnabled(false);
    }//GEN-LAST:event_courseNameFromProfessorAncestorAdded

    private void selectStudentMajorFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectStudentMajorFrameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectStudentMajorFrameActionPerformed

    private void selectStudentMajorFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_selectStudentMajorFrameAncestorAdded
        selectStudentMajorFrame.setEnabled(false);
    }//GEN-LAST:event_selectStudentMajorFrameAncestorAdded

    private void selectStudentNameFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_selectStudentNameFrameAncestorAdded
        selectStudentNameFrame.setEnabled(false);
    }//GEN-LAST:event_selectStudentNameFrameAncestorAdded

    private void selectStudentNumberFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_selectStudentNumberFrameAncestorAdded
        selectStudentNumberFrame.setEnabled(false);
    }//GEN-LAST:event_selectStudentNumberFrameAncestorAdded

    private void CourseNameFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_CourseNameFrameAncestorAdded
        CourseNameFrame.setEnabled(false);
    }//GEN-LAST:event_CourseNameFrameAncestorAdded

    private void professorFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_professorFrameAncestorAdded
        professorFrame.setEnabled(false);
    }//GEN-LAST:event_professorFrameAncestorAdded

    private void maxStudentsFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_maxStudentsFrameAncestorAdded
        maxStudentsFrame.setEnabled(false);
    }//GEN-LAST:event_maxStudentsFrameAncestorAdded

    private void countStudentsFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_countStudentsFrameAncestorAdded
        countStudentsFrame.setEnabled(false);
    }//GEN-LAST:event_countStudentsFrameAncestorAdded

    private void unitFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_unitFrameAncestorAdded
        unitFrame.setEnabled(false);
    }//GEN-LAST:event_unitFrameAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForProfessor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseManagementSystemForProfessor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CourseNameFrame;
    private javax.swing.JList<String> ProfessorCloseCourseList;
    private javax.swing.JList<String> ProfessorOpenCourseList;
    private javax.swing.JTextField countStudentsFrame;
    private javax.swing.JTextField courseNameFromProfessor;
    private javax.swing.JTextArea exmplainCourseManagement;
    private javax.swing.JTextArea explainProfessorCourseList;
    private javax.swing.JButton goCourseManagement;
    private javax.swing.JButton goProfessorCourseList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField maxStudentsFrame;
    private javax.swing.JPanel panel_professorCourseList;
    private javax.swing.JPanel panel_professorCourseManagement;
    private javax.swing.JTextField professorFrame;
    private javax.swing.JTextField professorIdFrame;
    private javax.swing.JTextField professorNameFrame;
    private javax.swing.JTextField selectStudentMajorFrame;
    private javax.swing.JTextField selectStudentNameFrame;
    private javax.swing.JTextField selectStudentNumberFrame;
    private javax.swing.JComboBox<String> selectUnitScore;
    private javax.swing.JList<String> students;
    private javax.swing.JTextField unitFrame;
    // End of variables declaration//GEN-END:variables
}
