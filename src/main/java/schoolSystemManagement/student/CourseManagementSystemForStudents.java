/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolSystemManagement.student;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import schoolSystemManagement.dto.CourseData;
import schoolSystemManagement.file.JsonFile;
import org.json.JSONObject;

import javax.swing.*;
import java.util.ArrayList;
import java.util.Arrays;

/**
 *
 * @author oxxultus
 */
public class CourseManagementSystemForStudents extends javax.swing.JFrame {

    public String studentName = "김영진";
    public String studentId = "S-695";
    JsonFile usersFile = new JsonFile("user_data.json", "user_data.json");
    JsonFile coursesFile = new JsonFile("course_data.json", "course_data.json");

    /**
     * Creates new form CourseManagementSystemForStudents
     */
    public CourseManagementSystemForStudents() {
        initComponents();
        setTitle("수강 관리 시스템");
        setSize(860,560);
        // 크기 조정 완전 금지
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 추가로 크기 조정 이벤트 리스너 제거
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 크기 변경 무시
                setSize(860, 560);
            }
        });
        // 패널을 숨기기
        panel_MyCourseList.setVisible(true);
        panel_SubCourse.setVisible(false);
    }
    public CourseManagementSystemForStudents(String studentName, String studentId) {
        this.studentName = studentName;
        this.studentId = studentId;
        initComponents();
        setTitle("수강 관리 시스템");
        setSize(860,560);
        // 크기 조정 완전 금지
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 추가로 크기 조정 이벤트 리스너 제거
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 크기 변경 무시
                setSize(860, 560);
            }
        });
        // 패널을 숨기기
        panel_MyCourseList.setVisible(true);
        panel_SubCourse.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_MyCourseList = new javax.swing.JPanel();
        professorName = new javax.swing.JTextArea();
        CourseScore = new javax.swing.JTextArea();
        CourseName = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        display_CourseList = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        goSubCourse = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        studentIdFrame = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        studentNameFrame = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        panel_SubCourse = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        display_SubCourseList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        MyCourseList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxStudents = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        countStudents = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        myUnit = new javax.swing.JTextArea();
        courseName = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        professor = new javax.swing.JTextArea();
        courseUnit = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        goMyCourse = new javax.swing.JButton();
        explainPage = new javax.swing.JTextArea();
        menubar_CMSForStudents = new javax.swing.JMenuBar();
        menu_CMSForStudents = new javax.swing.JMenu();
        first_menu_CMSForStudents = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        second_menu_CMSForStudents = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        panel_MyCourseList.setBackground(new java.awt.Color(255, 255, 255));
        panel_MyCourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                panel_MyCourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                panel_MyCourseListAncestorRemoved(evt);
            }
        });

        professorName.setBackground(new java.awt.Color(255, 255, 255));
        professorName.setColumns(20);
        professorName.setRows(5);
        professorName.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                professorNameComponentAdded(evt);
            }
        });
        professorName.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                professorNameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        CourseScore.setBackground(new java.awt.Color(255, 255, 255));
        CourseScore.setColumns(20);
        CourseScore.setRows(5);
        CourseScore.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                CourseScoreAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        CourseName.setBackground(new java.awt.Color(255, 255, 255));
        CourseName.setColumns(20);
        CourseName.setRows(5);
        CourseName.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                CourseNameComponentAdded(evt);
            }
        });
        CourseName.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                CourseNameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        display_CourseList.setBackground(new java.awt.Color(255, 255, 255));
        display_CourseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        display_CourseList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        display_CourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                display_CourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        display_CourseList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                display_CourseListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(display_CourseList);

        jLabel2.setText("과목 이름");

        jLabel4.setText("학점");

        jLabel5.setText("담당 교수");

        goSubCourse.setBackground(new java.awt.Color(255, 255, 255));
        goSubCourse.setText("수강 신청하기");
        goSubCourse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goSubCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goSubCourseActionPerformed(evt);
            }
        });

        jLabel12.setText("신청 한 과목 목록");

        studentIdFrame.setBackground(new java.awt.Color(255, 255, 255));
        studentIdFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                studentIdFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel13.setText("학생 아이디");

        studentNameFrame.setBackground(new java.awt.Color(255, 255, 255));
        studentNameFrame.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                studentNameFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel14.setText("학생 이름");

        javax.swing.GroupLayout panel_MyCourseListLayout = new javax.swing.GroupLayout(panel_MyCourseList);
        panel_MyCourseList.setLayout(panel_MyCourseListLayout);
        panel_MyCourseListLayout.setHorizontalGroup(
                panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_MyCourseListLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panel_MyCourseListLayout.createSequentialGroup()
                                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(panel_MyCourseListLayout.createSequentialGroup()
                                                                .addComponent(jLabel2)
                                                                .addGap(0, 0, Short.MAX_VALUE))
                                                        .addComponent(CourseName, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(professorName, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel5))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(CourseScore, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4)))
                                        .addComponent(jScrollPane1)
                                        .addComponent(goSubCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_MyCourseListLayout.createSequentialGroup()
                                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel12)
                                                        .addComponent(jLabel14)
                                                        .addComponent(studentNameFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(6, 6, 6)
                                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(studentIdFrame)
                                                        .addGroup(panel_MyCourseListLayout.createSequentialGroup()
                                                                .addComponent(jLabel13)
                                                                .addGap(0, 0, Short.MAX_VALUE)))))
                                .addContainerGap())
        );
        panel_MyCourseListLayout.setVerticalGroup(
                panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_MyCourseListLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel14)
                                        .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(studentNameFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(studentIdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)
                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_MyCourseListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(CourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CourseScore, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(professorName, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(goSubCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_SubCourse.setBackground(new java.awt.Color(255, 255, 255));

        display_SubCourseList.setBackground(new java.awt.Color(255, 255, 255));
        display_SubCourseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        display_SubCourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                display_SubCourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        display_SubCourseList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                display_SubCourseListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(display_SubCourseList);

        MyCourseList.setBackground(new java.awt.Color(255, 255, 255));
        MyCourseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        MyCourseList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                MyCourseListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane3.setViewportView(MyCourseList);

        jLabel1.setText("현재 신청 과목");

        jLabel3.setText("강의 목록");

        maxStudents.setBackground(new java.awt.Color(255, 255, 255));
        maxStudents.setColumns(20);
        maxStudents.setRows(5);

        jLabel6.setText("현재 수강 인원");

        countStudents.setBackground(new java.awt.Color(255, 255, 255));
        countStudents.setColumns(20);
        countStudents.setRows(5);

        jLabel7.setText("최대 수강 인원");

        jLabel8.setText("내가 신청 가능한 학점");

        myUnit.setBackground(new java.awt.Color(255, 255, 255));
        myUnit.setColumns(20);
        myUnit.setRows(5);

        courseName.setBackground(new java.awt.Color(255, 255, 255));
        courseName.setColumns(20);
        courseName.setRows(5);

        jLabel9.setText("과목 이름");

        jLabel10.setText("담당 교수");

        professor.setBackground(new java.awt.Color(255, 255, 255));
        professor.setColumns(20);
        professor.setRows(5);

        courseUnit.setBackground(new java.awt.Color(255, 255, 255));
        courseUnit.setColumns(20);
        courseUnit.setRows(5);

        jLabel11.setText("과목의 학점");

        submit.setBackground(new java.awt.Color(255, 255, 255));
        submit.setText("신청하기");
        submit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        goMyCourse.setBackground(new java.awt.Color(255, 255, 255));
        goMyCourse.setText("내 강의 목록");
        goMyCourse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        goMyCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goMyCourseActionPerformed(evt);
            }
        });

        explainPage.setBackground(new java.awt.Color(255, 255, 255));
        explainPage.setColumns(20);
        explainPage.setRows(5);
        explainPage.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                explainPageAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout panel_SubCourseLayout = new javax.swing.GroupLayout(panel_SubCourse);
        panel_SubCourse.setLayout(panel_SubCourseLayout);
        panel_SubCourseLayout.setHorizontalGroup(
                panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SubCourseLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                                .addComponent(goMyCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(submit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 837, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(explainPage)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SubCourseLayout.createSequentialGroup()
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(countStudents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel6))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(maxStudents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel7))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel8)
                                                                        .addComponent(myUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(7, 7, 7))
                                                        .addComponent(jLabel3)
                                                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(courseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel9))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(professor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel10))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel11)
                                                                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                                                                .addComponent(courseUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                                                .addGap(7, 7, 7)))))
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_SubCourseLayout.setVerticalGroup(
                panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(explainPage, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SubCourseLayout.createSequentialGroup()
                                                                .addComponent(jLabel9)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(courseName, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_SubCourseLayout.createSequentialGroup()
                                                                .addComponent(jLabel10)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(professor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel7)
                                                        .addComponent(jLabel8))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(maxStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(countStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(myUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(panel_SubCourseLayout.createSequentialGroup()
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel11)
                                                        .addComponent(jLabel1))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(courseUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addGap(7, 7, 7)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_SubCourseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(submit, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                                        .addComponent(goMyCourse, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        menubar_CMSForStudents.setBackground(new java.awt.Color(255, 255, 255));

        menu_CMSForStudents.setText("메뉴");
        menu_CMSForStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_CMSForStudentsActionPerformed(evt);
            }
        });

        first_menu_CMSForStudents.setText("수강 신청 목록");
        first_menu_CMSForStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                first_menu_CMSForStudentsActionPerformed(evt);
            }
        });
        menu_CMSForStudents.add(first_menu_CMSForStudents);
        menu_CMSForStudents.add(jSeparator1);

        second_menu_CMSForStudents.setText("수강 신청");
        second_menu_CMSForStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                second_menu_CMSForStudentsActionPerformed(evt);
            }
        });
        menu_CMSForStudents.add(second_menu_CMSForStudents);

        menubar_CMSForStudents.add(menu_CMSForStudents);

        setJMenuBar(menubar_CMSForStudents);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panel_MyCourseList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(panel_SubCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panel_MyCourseList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(panel_SubCourse, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void first_menu_CMSForStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_first_menu_CMSForStudentsActionPerformed
        panel_MyCourseList.setVisible(true);
        panel_SubCourse.setVisible(false);
        revalidate();  // UI 갱신
        repaint();     // 다시 그리기
    }//GEN-LAST:event_first_menu_CMSForStudentsActionPerformed

    private void second_menu_CMSForStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_second_menu_CMSForStudentsActionPerformed
        panel_SubCourse.setVisible(true);
        panel_MyCourseList.setVisible(false);
        revalidate();  // UI 갱신
        repaint();     // 다시 그리기
    }//GEN-LAST:event_second_menu_CMSForStudentsActionPerformed

    private void display_CourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_display_CourseListAncestorAdded
        // 특정 조건에 따라 JSON 배열 값 가져오기
        Object[] courseValues = usersFile.getAllJsonArrayValue("userId", studentId, "courseList", "course");

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (Object value : courseValues) {
            System.out.println(value.toString());
            listModel.addElement(value.toString());
        }

        // JList에 모델 설정
        display_CourseList.setModel(listModel);
        // CourseName과 CourseScore를 읽기 전용으로 설정
        CourseName.setEditable(false);  // 입력 불가
        CourseScore.setEditable(false); // 입력 불가
        professorName.setEditable(false); // 입력 불가
    }//GEN-LAST:event_display_CourseListAncestorAdded

    private void display_CourseListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_display_CourseListValueChanged
        // 선택된 항목의 과목 이름 가져오기
        String selectedCourseName = display_CourseList.getSelectedValue();

        if (selectedCourseName != null) {
            // 선택된 과목 이름을 CourseName 텍스트 영역에 출력
            CourseName.setText(selectedCourseName);

            // 선택된 과목 이름을 사용하여 score 가져오기
            String courseScore = (usersFile.getJsonArrayValue("userId", studentId, "courseList", "course", selectedCourseName, "score")).toString();

            // CourseScore 텍스트 영역에 점수 출력
            CourseScore.setText(courseScore);

            // 담당 교수 이름을 가져오는 부분 (강의 데이터파일 읽어오기)
            String professor = (coursesFile.getUserValueByStandardKey("name", selectedCourseName , "professor")).toString();
            // professorName 텍스트 영역에 점수 출력
            professorName.setText(professor);

        }
        // CourseName과 CourseScore를 읽기 전용으로 설정
        CourseName.setEditable(false);  // 입력 불가
        CourseScore.setEditable(false); // 입력 불가
        professorName.setEditable(false); // 입력 불가
    }//GEN-LAST:event_display_CourseListValueChanged

    private void CourseNameComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_CourseNameComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_CourseNameComponentAdded

    private void professorNameComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_professorNameComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_professorNameComponentAdded

    private void panel_MyCourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_panel_MyCourseListAncestorAdded

    }//GEN-LAST:event_panel_MyCourseListAncestorAdded

    private void menu_CMSForStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_CMSForStudentsActionPerformed

    }//GEN-LAST:event_menu_CMSForStudentsActionPerformed

    private void panel_MyCourseListAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_panel_MyCourseListAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_panel_MyCourseListAncestorRemoved

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded

    }//GEN-LAST:event_formComponentAdded

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        // 신청하기 버튼을 눌렀을 때
        // courseName, professor, courseUnit, countStudents, maxStudents, myUnit 텍스트 필드에서 값을 받아옴
        String courseNameData = courseName.getText();
        int myCourseUnit = 0;
        int courseUnitData = 0;
        int countStudentsData = 0;
        int maxStudentsData = 0;

        // 텍스트 필드가 비어있거나 null일 경우 예외 처리
        if (myUnit.getText().trim().isEmpty() || courseUnit.getText().trim().isEmpty() ||
                countStudents.getText().trim().isEmpty() || maxStudents.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "교과목을 선택 해 주세요.");
            return;
        }

        // 텍스트 필드 값이 올바르게 입력되었는지 확인
        try {
            myCourseUnit = Integer.parseInt(myUnit.getText());
            courseUnitData = Integer.parseInt(courseUnit.getText());
            countStudentsData = Integer.parseInt(countStudents.getText());
            maxStudentsData = Integer.parseInt(maxStudents.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "입력 값이 잘못되었습니다. 숫자만 입력해주세요.");
            return;
        }

        // courseUnit 검증: myUnit이 courseUnit보다 작으면 안됨
        if (courseUnitData > myCourseUnit) {
            JOptionPane.showMessageDialog(this, "신청 가능 학점을 초과 하였습니다");
            return; // 학점 조건을 충족하지 않으면 실행 종료
        }

        // maxStudents 검증: 현재 학생 수 + 1이 maxStudents보다 많으면 안됨
        if (countStudentsData + 1 > maxStudentsData) {
            JOptionPane.showMessageDialog(this, "정원 초과입니다.");
            return; // 정원 초과 시 실행 종료
        }

        // 이미 신청한 과목인지 확인
        Object[] courseUnitValues = usersFile.getAllJsonArrayValue("userId", studentId, "courseList", "course");
        ArrayList<String> courseList = new ArrayList<>();

        for (Object value : courseUnitValues) {
            courseList.add(value.toString());
        }

        // 이미 신청한 과목인지 확인
        if (courseList.contains(courseNameData)) {
            JOptionPane.showMessageDialog(this, "이미 신청한 과목입니다.");
            return; // 이미 신청한 과목이면 신청을 취소하고 종료
        }

        // 위 모든 검증을 통과한 경우 데이터 추가
        Object countStudentsObject = coursesFile.getUserValueByStandardKey("name", courseNameData, "countStudents");

        int nowCountStudents = 0;

        // countStudents 값이 null이 아닌지 확인하고, String으로 변환 후 정수로 변환
        if (countStudentsObject != null) {
            try {
                // Object를 String으로 변환한 후, 그 값을 정수로 변환
                String countStudentsStr = countStudentsObject.toString();
                nowCountStudents = Integer.parseInt(countStudentsStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "학생 수 정보가 잘못되었습니다.");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "학생 수 정보가 존재하지 않습니다.");
            return;
        }

        nowCountStudents += 1; // 학생 수 증가
        coursesFile.setValueByStandardKey("name", courseNameData, "countStudents", nowCountStudents);  // 업데이트된 학생 수 저장

        // 사용자 과목 목록에 추가
        usersFile.addValueByCourse("userId", studentId, "courseList", courseNameData, 0, courseUnitData);

        // 신청 과목 리스트 갱신 시키기
        Object[] courseValues = usersFile.getAllJsonArrayValue("userId", studentId, "courseList", "course");

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (Object value : courseValues) {
            listModel.addElement(value.toString());
        }
        // JList에 모델 설정
        MyCourseList.setModel(listModel);

        // 내 남은 학점 갱신 시키기
        Object[] updateCourseUnitValues = usersFile.getAllJsonArrayValue("userId", studentId, "courseList", "unit");

        // 결과 계산
        int unitSum = 0;
        for (Object unitValue : updateCourseUnitValues) {
            // Object를 String으로 변환한 후, Integer로 변환
            unitSum += Integer.parseInt(unitValue.toString());  // toString()을 호출하여 Object를 String으로 변환
        }
        // myUnit 텍스트 필드에 합산된 학점을 표시
        myUnit.setText(Integer.toString(18-unitSum));  // Integer.toString() 사용

        // 현재 신청 인원 갱신 시키기
        String updateCountStudentsData = coursesFile.getUserValueByStandardKey("name", courseNameData, "countStudents").toString();
        countStudents.setText(updateCountStudentsData);

        // 신청 완료 확인 알림창
        JOptionPane.showMessageDialog(this, "과목 신청이 완료되었습니다.");
    }//GEN-LAST:event_submitActionPerformed

    private void MyCourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_MyCourseListAncestorAdded
        // 특정 조건에 따라 JSON 배열 값 가져오기
        Object[] courseValues = usersFile.getAllJsonArrayValue("userId", studentId, "courseList", "course");

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (Object value : courseValues) {
            System.out.println(value.toString());
            listModel.addElement(value.toString());
        }

        // JList에 모델 설정
        MyCourseList.setModel(listModel);
        // 읽기 전용으로 설정
        courseName.setEditable(false);  // 입력 불가
        professor.setEditable(false); // 입력 불가
        courseUnit.setEditable(false); // 입력 불가
        countStudents.setEditable(false); // 입력 불가
        maxStudents.setEditable(false); // 입력 불가
        myUnit.setEditable(false); // 입력 불가
        MyCourseList.setEnabled(false);

    }//GEN-LAST:event_MyCourseListAncestorAdded

    private void display_SubCourseListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_display_SubCourseListValueChanged
        // 선택된 항목의 과목 이름 가져오기
        String selectedCourseName = display_SubCourseList.getSelectedValue();

        if (selectedCourseName != null) {
            // 선택된 과목 이름을 CourseName 텍스트 영역에 출력
            courseName.setText(selectedCourseName);

            // 담당 교수 이름 출력
            String professorData = coursesFile.getUserValueByStandardKey("name", selectedCourseName , "professor").toString();
            professor.setText(professorData);

            // 해당 과목 학점 출력
            String courseUnitData = coursesFile.getUserValueByStandardKey("name", selectedCourseName, "unit").toString();
            courseUnit.setText(courseUnitData);

            // 최대 인원 출력
            String maxStudentsData = coursesFile.getUserValueByStandardKey("name", selectedCourseName, "maxStudents").toString();
            maxStudents.setText(maxStudentsData);

            // 현재 인원 출력
            String countStudentsData = coursesFile.getUserValueByStandardKey("name", selectedCourseName, "countStudents").toString();
            countStudents.setText(countStudentsData);

            // 메서드 사용 하기
            Object[] courseUnitValues = usersFile.getAllJsonArrayValue("userId", studentId, "courseList", "unit");

            // 결과 계산
            int unitSum = 0;

            if (courseUnitValues != null) {
                for (Object unitValue : courseUnitValues) {
                    if (unitValue != null) {
                        String valueStr = unitValue.toString();
                        try {
                            double parsedValue = Double.parseDouble(valueStr); // 소수점 포함 숫자 처리
                            unitSum += (int) parsedValue; // 필요에 따라 반올림은 Math.round()로 교체
                        } catch (NumberFormatException e) {
                            System.out.println("올바르지 않은 값: " + valueStr);
                        }
                    } else {
                        System.out.println("스킵 처리 합니다.");
                    }
                }
            } else {
                System.out.println("courseUnitValues 값이 존재하지 않습니다.");
            }

            myUnit.setText(Integer.toString(18 - unitSum));

        }
        // 읽기 전용으로 설정
        courseName.setEnabled(false);  // 입력 불가
        professor.setEnabled(false); // 입력 불가
        courseUnit.setEnabled(false); // 입력 불가
        countStudents.setEnabled(false); // 입력 불가
        maxStudents.setEnabled(false); // 입력 불가
        myUnit.setEnabled(false); // 입력 불가
    }//GEN-LAST:event_display_SubCourseListValueChanged

    private void display_SubCourseListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_display_SubCourseListAncestorAdded
        JSONObject filteredObjects = coursesFile.getAllObjectsByKeyValue("status", "true");

        ArrayList<CourseData> courseDataList = new ArrayList<>();

        // 반복하여 필터링된 객체의 특정 속성을 출력
        for (String key : filteredObjects.keySet()) {
            JSONObject course = filteredObjects.getJSONObject(key);

            // 원하는 속성 출력
            String name = course.optString("name", "N/A");
            int maxStudents = course.optInt("maxStudents", 0);
            String professor = course.optString("professor", "N/A");
            int unit = course.optInt("unit", 0);

            // 결과 확인
            System.out.printf("강의 이름: %s, 최대 학생수: %d, 담당 교수: %s, 학점: %d%n",
                    name, maxStudents, professor, unit);

            // 결과를 DTO 객체로 만들어 ArrayList에 저장
            CourseData courseDTO = new CourseData(name, professor, maxStudents, unit);
            courseDataList.add(courseDTO);
        }

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (CourseData value : courseDataList) {
            System.out.println(value.getName());
            listModel.addElement(value.getName());
        }

        // JList에 모델 설정
        display_SubCourseList.setModel(listModel);

        // 읽기 전용으로 설정
        courseName.setEnabled(false);  // 입력 불가
        professor.setEnabled(false); // 입력 불가
        courseUnit.setEnabled(false); // 입력 불가
        countStudents.setEnabled(false); // 입력 불가
        maxStudents.setEnabled(false); // 입력 불가
        myUnit.setEnabled(false); // 입력 불가
    }//GEN-LAST:event_display_SubCourseListAncestorAdded

    private void goSubCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goSubCourseActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "정말로 이동하시겠습니까?", "확인", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            panel_MyCourseList.setVisible(false);
            panel_SubCourse.setVisible(true);
            revalidate();  // UI 갱신
            repaint();     // 다시 그리기
        } else {
            // NO를 클릭한 경우
            return;
        }
    }//GEN-LAST:event_goSubCourseActionPerformed

    private void goMyCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goMyCourseActionPerformed
        int result = JOptionPane.showConfirmDialog(null, "정말로 이동하시겠습니까?", "확인", JOptionPane.YES_NO_OPTION);
        if (result == JOptionPane.YES_OPTION) {
            panel_MyCourseList.setVisible(true);
            panel_SubCourse.setVisible(false);
            revalidate();  // UI 갱신
            repaint();     // 다시 그리기
        } else {
            // NO를 클릭한 경우
            return;
        }
    }//GEN-LAST:event_goMyCourseActionPerformed

    private void explainPageAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_explainPageAncestorAdded
        explainPage.setText("아래의 강의 목록에서 교과목을 선택하여 수강 신청이 가능합니다.\n - 최대 학점을 초과하게 되면 더 이상 신청이 불가능합니다.\n - 이미 신청 한 강의는 중복 신청이 불가능 합니다.");
        explainPage.setEnabled(false); // 입력 불가
    }//GEN-LAST:event_explainPageAncestorAdded

    private void studentIdFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_studentIdFrameAncestorAdded
        studentIdFrame.setText(studentId);

        // 필드 비활성화
        studentIdFrame.setEnabled(false);
    }//GEN-LAST:event_studentIdFrameAncestorAdded

    private void studentNameFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_studentNameFrameAncestorAdded
        studentNameFrame.setText(studentName);

        // 필드 비활성화
        studentNameFrame.setEnabled(false);
    }//GEN-LAST:event_studentNameFrameAncestorAdded

    private void CourseNameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_CourseNameAncestorAdded
        CourseName.setEnabled(false);
    }//GEN-LAST:event_CourseNameAncestorAdded

    private void professorNameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_professorNameAncestorAdded
        professorName.setEnabled(false);
    }//GEN-LAST:event_professorNameAncestorAdded

    private void CourseScoreAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_CourseScoreAncestorAdded
        CourseScore.setEnabled(false);
    }//GEN-LAST:event_CourseScoreAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseManagementSystemForStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseManagementSystemForStudents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CourseName;
    private javax.swing.JTextArea CourseScore;
    private javax.swing.JList<String> MyCourseList;
    private javax.swing.JTextArea countStudents;
    private javax.swing.JTextArea courseName;
    private javax.swing.JTextArea courseUnit;
    private javax.swing.JList<String> display_CourseList;
    private javax.swing.JList<String> display_SubCourseList;
    private javax.swing.JTextArea explainPage;
    private javax.swing.JMenuItem first_menu_CMSForStudents;
    private javax.swing.JButton goMyCourse;
    private javax.swing.JButton goSubCourse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea maxStudents;
    private javax.swing.JMenu menu_CMSForStudents;
    private javax.swing.JMenuBar menubar_CMSForStudents;
    private javax.swing.JTextArea myUnit;
    private javax.swing.JPanel panel_MyCourseList;
    private javax.swing.JPanel panel_SubCourse;
    private javax.swing.JTextArea professor;
    private javax.swing.JTextArea professorName;
    private javax.swing.JMenuItem second_menu_CMSForStudents;
    private javax.swing.JTextField studentIdFrame;
    private javax.swing.JTextField studentNameFrame;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
