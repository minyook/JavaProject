/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolSystemManagement.manager.course;

import java.util.ArrayList;
import javax.swing.*;

import org.json.JSONObject;
import schoolSystemManagement.dto.CourseData;
import schoolSystemManagement.dto.UserData;
import schoolSystemManagement.file.JsonFile;

/**
 * 강좌를 추가 할 수 있는 프레임 입니다.
 *
 * @author 주정현
 * @version 1.0
 * @since 2024-12-03
 */
public class addCourseSystem extends javax.swing.JFrame {

    // 전체적으로 사용하기 위해 파일을 불러오는 부분입니다.
    JsonFile usersFile = new JsonFile("user_data.json", "user_data.json");
    JsonFile coursesFile = new JsonFile("course_data.json", "course_data.json");

    /**
     * 기본 생성자 입니다,
     */
    public addCourseSystem() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setSize(630,635);
        // 크기 조정 완전 금지
        setResizable(false);
        setTitle("강의 추가");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        courseDiscriptionScrollPane = new javax.swing.JScrollPane();
        courseDiscriptionTextArea = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        courseDiscriptionLabel = new javax.swing.JLabel();
        maxStudentsTextField = new javax.swing.JTextField();
        maxStudentsLabel = new javax.swing.JLabel();
        countStudentsTextField = new javax.swing.JTextField();
        countStudentsLabel = new javax.swing.JLabel();
        statusTextField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        professorIdTextField = new javax.swing.JTextField();
        professorIdLabel = new javax.swing.JLabel();
        professorLabel = new javax.swing.JLabel();
        unitTextField = new javax.swing.JTextField();
        unitLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        professorComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        courseDiscriptionTextArea.setBackground(new java.awt.Color(255, 255, 255));
        courseDiscriptionTextArea.setColumns(20);
        courseDiscriptionTextArea.setRows(5);
        courseDiscriptionTextArea.setText("강의에 대한 설명을 작성해 주세요.");
        courseDiscriptionScrollPane.setViewportView(courseDiscriptionTextArea);

        saveButton.setBackground(new java.awt.Color(255, 255, 255));
        saveButton.setText("추가");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        courseDiscriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        courseDiscriptionLabel.setText("강의 설명");

        maxStudentsTextField.setBackground(new java.awt.Color(255, 255, 255));
        maxStudentsTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        maxStudentsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxStudentsTextFieldActionPerformed(evt);
            }
        });

        maxStudentsLabel.setText("최대 수강생 수");

        countStudentsTextField.setBackground(new java.awt.Color(255, 255, 255));
        countStudentsTextField.setText("0");
        countStudentsTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        countStudentsTextField.setEnabled(false);

        countStudentsLabel.setText("현재 수강생 수");

        statusTextField.setBackground(new java.awt.Color(255, 255, 255));
        statusTextField.setText("false");
        statusTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        statusTextField.setEnabled(false);
        statusTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusTextFieldActionPerformed(evt);
            }
        });

        statusLabel.setText("개설 여부");

        professorIdTextField.setBackground(new java.awt.Color(255, 255, 255));
        professorIdTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        professorIdTextField.setEnabled(false);
        professorIdTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                professorIdTextFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        professorIdLabel.setText("담당 교수 아이디");

        professorLabel.setText("담당 교수");

        unitTextField.setBackground(new java.awt.Color(255, 255, 255));
        unitTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        unitTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitTextFieldActionPerformed(evt);
            }
        });

        unitLabel.setText("학점");

        nameTextField.setBackground(new java.awt.Color(255, 255, 255));
        nameTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        nameLabel.setText("강의 이름");

        titleLabel.setFont(new java.awt.Font("HY견고딕", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("강의 추가");
        titleLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        professorComboBox.setBackground(new java.awt.Color(255, 255, 255));
        professorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        professorComboBox.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                professorComboBoxAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        professorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                professorComboBoxActionPerformed(evt);
            }
        });
        professorComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                professorComboBoxPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameTextField)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(courseDiscriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(175, 175, 175))
                    .addComponent(courseDiscriptionScrollPane)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(countStudentsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxStudentsTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(countStudentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(maxStudentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(professorIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusTextField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(professorIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(professorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(professorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(unitLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                            .addComponent(unitTextField))))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitLabel)
                    .addComponent(professorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(unitTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(professorComboBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(professorIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(professorIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxStudentsLabel)
                    .addComponent(countStudentsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(countStudentsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseDiscriptionLabel))
                    .addComponent(maxStudentsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(courseDiscriptionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maxStudentsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxStudentsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxStudentsTextFieldActionPerformed

    private void statusTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTextFieldActionPerformed

    private void unitTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_unitTextFieldActionPerformed

    private void professorComboBoxAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_professorComboBoxAncestorAdded
        // 사용자 리스트에서 교수 목록을 가져온다.
        JSONObject filteredObjects = usersFile.getAllObjectsByKeyValue("userType", "교수");

        // filteredObjects가 비어 있지 않으면 처리
        if (filteredObjects != null && !filteredObjects.isEmpty()) {
            ArrayList<UserData> userDataList = new ArrayList<>();

            // 반복하여 필터링된 객체의 특정 속성을 출력
            for (String key : filteredObjects.keySet()) {
                JSONObject user = filteredObjects.getJSONObject(key);

                // 원하는 속성 추출
                String name = user.optString("name", "N/A");
                String userId = user.optString("userId", "N/A");
                String userType = user.optString("userType", "N/A");

                // 결과를 DTO 객체로 만들어 ArrayList에 저장
                UserData userDTO = new UserData(name, userId, userType);
                userDataList.add(userDTO);
            }

            // JComboBox에 데이터를 설정하기 위한 DefaultComboBoxModel 생성
            DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();

            // 필터링된 데이터 추가
            for (UserData value : userDataList) {
                // "이름 - 사용자 ID" 형식으로 데이터를 추가
                comboBoxModel.addElement(value.getName() + " (" + value.getUserId()+ ")");
            }

            // JComboBox에 모델 설정
            professorComboBox.setModel(comboBoxModel);
        } else {
            // 필터링된 객체가 비어 있을 경우 JComboBox에 아무것도 추가하지 않음
            // 공백 상태로 유지
            DefaultComboBoxModel<String> emptyModel = new DefaultComboBoxModel<>();
            professorComboBox.setModel(emptyModel);
        }
    }//GEN-LAST:event_professorComboBoxAncestorAdded

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // 추가 버튼을 누르면 파일이 추가된다.
        // 파일 갱신
        coursesFile = new JsonFile("course_data.json", "course_data.json");
        
        String courseName = nameTextField.getText();
        System.out.println(courseName);
        
        // 강의명이 비어있는지 확인
        if (courseName.isEmpty()) {
            JOptionPane.showMessageDialog(null, "강의명을 입력해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }

        // 사용자 리스트에서 개설된 강의 목록을 가져온다.
        JSONObject filteredTrueObjects = coursesFile.getAllObjectsByKeyValue("status", "true");
        JSONObject filteredFalseObjects = coursesFile.getAllObjectsByKeyValue("status", "false");

        // 비어있으면 빈 리스트로 초기화
        if (filteredTrueObjects == null || filteredTrueObjects.isEmpty()) {
            System.out.println("리스트 초기화1");
            filteredTrueObjects = new JSONObject(); // 빈 JSONObject로 초기화
        }

        if (filteredFalseObjects == null || filteredFalseObjects.isEmpty()) {
            System.out.println("리스트 초기화2");
            filteredFalseObjects = new JSONObject(); // 빈 JSONObject로 초기화
        }

        ArrayList<CourseData> courseDataList = new ArrayList<>();

        // 개설된 강의 목록에서 name 속성 추출하여 CourseData 객체로 추가
        for (String key : filteredTrueObjects.keySet()) {
            JSONObject user = filteredTrueObjects.getJSONObject(key);

            // 원하는 속성 추출
            String name = user.optString("name", "N/A");
            
            System.out.println(name);

            // CourseData 객체로 만들어 ArrayList에 저장
            CourseData courseDTO = new CourseData(name);
            courseDataList.add(courseDTO);
        }

        // 개설되지 않은 강의 목록에서 name 속성 추출하여 CourseData 객체로 추가
        for (String key : filteredFalseObjects.keySet()) {
            JSONObject user = filteredFalseObjects.getJSONObject(key);

            // 원하는 속성 추출
            String name = user.optString("name", "N/A");

            // CourseData 객체로 만들어 ArrayList에 저장
            CourseData courseDTO = new CourseData(name);
            courseDataList.add(courseDTO);
        }

        // 필터링된 객체가 비어있지 않다면 강의명 중복 체크
        if (!courseDataList.isEmpty()) {
            
            for (CourseData value : courseDataList) {
                if (value.getName().equals(courseName)) {
                    JOptionPane.showMessageDialog(null, "이미 존재하는 강의명입니다.", "알림", JOptionPane.WARNING_MESSAGE);
                    return; // 작업 취소
                }
            }
        }

        // 교수 이름과 ID를 분리해서 이름만 저장
        String courseProfessor = professorComboBox.getSelectedItem().toString();
        if (courseProfessor.isEmpty()) {
            JOptionPane.showMessageDialog(null, "교수명을 선택해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }

        if (courseProfessor.contains(" (") && courseProfessor.contains(")")) {
            // "이름 (사용자ID)" 형식에서 이름과 사용자ID로 분리
            String[] parts = courseProfessor.split(" \\(");
            if (parts.length == 2) {
                courseProfessor = parts[0].trim(); // 이름만 저장
            }
        } else {
            // 형식이 잘못된 경우 처리
            JOptionPane.showMessageDialog(null, "잘못된 교수명 형식입니다.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }

        String courseProfessorId = professorIdTextField.getText();
        if (courseProfessorId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "담당 교수를 선택해 주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }

        String courseStatus = statusTextField.getText();

        String courseUnitStr = unitTextField.getText();
        if (courseUnitStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "학점을 입력해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }
        int courseUnit = 0;
        try {
            courseUnit = Integer.parseInt(courseUnitStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "학점은 숫자로 입력해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }

        String courseCountStudentsStr = countStudentsTextField.getText();
        

        String courseMaxStudentsStr = maxStudentsTextField.getText();
        if (courseMaxStudentsStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "최대 학생 수를 입력해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }
        int courseMaxStudents = 0;
        try {
            courseMaxStudents = Integer.parseInt(courseMaxStudentsStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "최대 학생 수는 숫자로 입력해주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }
        
        String courseDiscription = courseDiscriptionTextArea.getText();
        if (courseDiscription.isEmpty()) {
            JOptionPane.showMessageDialog(null, "강의에 대한 설명을 작성해 주세요.", "알림", JOptionPane.WARNING_MESSAGE);
            return; // 작업 취소
        }
        
        // 확인 대화 상자 띄우기
        int confirm = JOptionPane.showConfirmDialog(
            null, 
            "정말로 강의를 추가하시겠습니까?",  // 메시지
            "확인",  // 제목
            JOptionPane.YES_NO_OPTION,  // 옵션 (확인 / 취소)
            JOptionPane.QUESTION_MESSAGE  // 아이콘 (질문 아이콘)
        );

        // "확인"을 눌렀을 때
        if (confirm == JOptionPane.YES_OPTION) {
            // 강의 추가 메서드 호출
            coursesFile.updateCourse(courseName, courseProfessor, courseProfessorId, courseUnitStr, courseStatus, courseCountStudentsStr, courseMaxStudentsStr, courseDiscription);
            JOptionPane.showMessageDialog(null, "강의가 성공적으로 추가되었습니다.", "성공", JOptionPane.INFORMATION_MESSAGE);
            
            // 현재 창 닫기
            dispose();
        }
        // "취소"를 눌렀을 때
        else if (confirm == JOptionPane.NO_OPTION) {
            // 취소된 경우 아무런 처리 없음
            JOptionPane.showMessageDialog(null, "강의 추가가 취소되었습니다.", "취소", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void professorComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_professorComboBoxPropertyChange
        
    }//GEN-LAST:event_professorComboBoxPropertyChange

    private void professorIdTextFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_professorIdTextFieldAncestorAdded
        
    }//GEN-LAST:event_professorIdTextFieldAncestorAdded

    private void professorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_professorComboBoxActionPerformed
        // JComboBox에서 선택된 항목 가져오기
        String selectedItem = professorComboBox.getSelectedItem().toString();

        // 선택된 항목이 예상된 형식인지 확인
        if (selectedItem.contains(" (") && selectedItem.contains(")")) {
            // 선택된 항목을 "이름 (사용자ID)" 형식에서 이름과 사용자ID로 분리
            String[] parts = selectedItem.split(" \\(");  // "( "으로 분리

            if (parts.length == 2) {
                String userName = parts[0].trim();  // 이름
                String userId = parts[1].replace(")", "").trim();  // 사용자ID (뒤의 ")" 제거)

                // 결과 출력
                System.out.println("이름: " + userName + ", 사용자 ID: " + userId);
                professorIdTextField.setText(userId);
            } else {
                // 형식이 예상과 다를 경우 오류 처리
                System.out.println("잘못된 형식의 항목이 선택되었습니다.");
            }
        } else {
            // 예상된 형식이 아닌 경우 오류 처리
            System.out.println("선택된 항목이 잘못된 형식입니다.");
        }
    }//GEN-LAST:event_professorComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addCourseSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addCourseSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addCourseSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addCourseSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addCourseSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countStudentsLabel;
    private javax.swing.JTextField countStudentsTextField;
    private javax.swing.JLabel courseDiscriptionLabel;
    private javax.swing.JScrollPane courseDiscriptionScrollPane;
    private javax.swing.JTextArea courseDiscriptionTextArea;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel maxStudentsLabel;
    private javax.swing.JTextField maxStudentsTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JComboBox<String> professorComboBox;
    private javax.swing.JLabel professorIdLabel;
    private javax.swing.JTextField professorIdTextField;
    private javax.swing.JLabel professorLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField statusTextField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel unitLabel;
    private javax.swing.JTextField unitTextField;
    // End of variables declaration//GEN-END:variables
}
