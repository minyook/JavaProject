/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package schoolSystemManagement.manager.course;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import schoolSystemManagement.dto.UserData;
import schoolSystemManagement.file.JsonFile;
import org.json.JSONObject;

import javax.swing.*;
import java.util.ArrayList;

public class ChargeTuitionFeeSystemForManager extends javax.swing.JFrame {

    // 테스트를 위한 초기화 값 입니다.
    public String managerName = "김영진";
    public String managerId = "S-027";

    // 전체적으로 사용하기 위해 파일을 불러오는 부분입니다.
    JsonFile usersFile = new JsonFile("user_data.json", "user_data.json");
    JsonFile coursesFile = new JsonFile("course_data.json", "course_data.json");
    /**
     * 기본 생성자 입니다.
     */
    public ChargeTuitionFeeSystemForManager() {
        initComponents();
        setTitle("[수업관리자] 학비 청구 시스템");
        setSize(860,590);
        // 크기 조정 완전 금지
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 추가로 크기 조정 이벤트 리스너 제거
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 크기 변경 무시
                setSize(860, 590);
            }
        });
    }

    /**
     * 부모 프레임으로 부터 이름과 아이디를 전달받아 사용합니다.
     *
     * @param managerName
     * @param managerId
     */
    public ChargeTuitionFeeSystemForManager(String managerName, String managerId) {
        this.managerName = managerName;
        this.managerId = managerId;
        initComponents();
        setTitle("[수업관리자] 학비 청구 시스템");
        setSize(860,590);
        // 크기 조정 완전 금지
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // 추가로 크기 조정 이벤트 리스너 제거
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // 크기 변경 무시
                setSize(860, 590);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        subStudentsScrollPane = new javax.swing.JScrollPane();
        CourseSubStudentsList = new javax.swing.JList<>();
        subStudentCoursesScrollPane = new javax.swing.JScrollPane();
        studentSubCoursesList = new javax.swing.JList<>();
        subCoursesListLabel = new javax.swing.JLabel();
        studentNameLabel = new javax.swing.JLabel();
        studentNameTextField = new javax.swing.JTextField();
        studentUnitLabel = new javax.swing.JLabel();
        studentTotalUnitTextField = new javax.swing.JTextField();
        studentSubCoursesLabel = new javax.swing.JLabel();
        coursesPriceTextField = new javax.swing.JTextField();
        tuitionLabel = new javax.swing.JLabel();
        submitPriceButton = new javax.swing.JButton();
        studentMajorLabel = new javax.swing.JLabel();
        studentMajorTextField = new javax.swing.JTextField();
        studentUserIdTextField = new javax.swing.JTextField();
        studentIdLabel = new javax.swing.JLabel();
        managerIdTextField = new javax.swing.JTextField();
        managerNameTextField = new javax.swing.JTextField();
        managerNameLabel = new javax.swing.JLabel();
        managerIdLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        CourseSubStudentsList.setBackground(new java.awt.Color(255, 255, 255));
        CourseSubStudentsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        CourseSubStudentsList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                CourseSubStudentsListAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        CourseSubStudentsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                CourseSubStudentsListValueChanged(evt);
            }
        });
        subStudentsScrollPane.setViewportView(CourseSubStudentsList);

        studentSubCoursesList.setBackground(new java.awt.Color(255, 255, 255));
        studentSubCoursesList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        studentSubCoursesList.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                studentSubListFrameAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        subStudentCoursesScrollPane.setViewportView(studentSubCoursesList);

        subCoursesListLabel.setText("수강 신청 한 학생 목록");

        studentNameLabel.setText("학생 이름");

        studentNameTextField.setBackground(new java.awt.Color(255, 255, 255));
        studentNameTextField.setEnabled(false);
        studentNameTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        studentUnitLabel.setText("총 수강 신청 학점");

        studentTotalUnitTextField.setBackground(new java.awt.Color(255, 255, 255));
        studentTotalUnitTextField.setEnabled(false);
        studentTotalUnitTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        studentSubCoursesLabel.setText("신청 한 강의 목록");

        coursesPriceTextField.setBackground(new java.awt.Color(255, 255, 255));
        coursesPriceTextField.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tuitionLabel.setText("청구 할 금액");

        submitPriceButton.setBackground(new java.awt.Color(255, 255, 255));
        submitPriceButton.setText("청구하기");
        submitPriceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitPriceActionPerformed(evt);
            }
        });

        studentMajorLabel.setText("학과");

        studentMajorTextField.setBackground(new java.awt.Color(255, 255, 255));
        studentMajorTextField.setEnabled(false);
        studentMajorTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        studentUserIdTextField.setBackground(new java.awt.Color(255, 255, 255));
        studentUserIdTextField.setEnabled(false);
        studentUserIdTextField.setMinimumSize(new java.awt.Dimension(64, 26));
        studentUserIdTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        studentIdLabel.setText("사용자 아이디");

        managerIdTextField.setBackground(new java.awt.Color(255, 255, 255));
        managerIdTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                managerIdTextFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        managerNameTextField.setBackground(new java.awt.Color(255, 255, 255));
        managerNameTextField.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                managerNameTextFieldAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        managerNameLabel.setText("관리자 이름");

        managerIdLabel.setText("관리자 아이디");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(managerNameLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(managerNameTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(managerIdLabel)
                                .addGap(186, 186, 186))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(managerIdTextField)
                                .addContainerGap())))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subCoursesListLabel)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(subStudentsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subStudentCoursesScrollPane)
                                    .addComponent(studentNameTextField)
                                    .addComponent(coursesPriceTextField)
                                    .addComponent(submitPriceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(studentMajorTextField)
                                    .addComponent(studentTotalUnitTextField)
                                    .addComponent(studentUserIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(studentNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(tuitionLabel)
                                            .addComponent(studentMajorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(studentUnitLabel)
                                            .addComponent(studentIdLabel)
                                            .addComponent(studentSubCoursesLabel))
                                        .addGap(0, 127, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(managerNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(managerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(managerIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(managerIdLabel)
                        .addGap(44, 44, 44)))
                .addComponent(subCoursesListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(studentNameLabel)
                        .addGap(5, 5, 5)
                        .addComponent(studentNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentMajorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentMajorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentUserIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentUnitLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentTotalUnitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentSubCoursesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subStudentCoursesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tuitionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coursesPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitPriceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(subStudentsScrollPane))
                .addGap(14, 14, 14))
        );

        menuBar.setBackground(new java.awt.Color(255, 255, 255));

        mainMenu.setText("메뉴");
        menuBar.add(mainMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CourseSubStudentsListAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_CourseSubStudentsListAncestorAdded
        Object[] subStudentsData = usersFile.getAllJsonObjectWhereTargetKeyExists("courseList","course");
        ArrayList<UserData> subStudents = new ArrayList<>();

        // 필터링된 객체가 없는 경우 처리
        if (subStudentsData.length == 0) {
            // JList에 "학생이 존재하지 않습니다." 메시지 추가
            DefaultListModel<String> emptyModel = new DefaultListModel<>();
            emptyModel.addElement("학생이 존재하지 않습니다.");
            CourseSubStudentsList.setModel(emptyModel);
            return;  // 더 이상 진행하지 않음
        }

        // 반복하여 필터링된 객체의 특정 속성을 추출하고, DTO 객체로 변환하여 리스트에 저장
        for (Object obj : subStudentsData) {
            JSONObject course = (JSONObject) obj;

            // 원하는 속성 추출
            String name = course.optString("name", "N/A");
            String userId = course.optString("userId", "N/A");
            String major = course.optString("major", "N/A");
            String number = course.optString("number", "N/A");

            // 결과를 DTO 객체로 만들어 ArrayList에 저장
            UserData userDTO = new UserData(name, userId, number, major);
            subStudents.add(userDTO);
        }

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();

        // courseDataList에서 강의 이름을 가져와 JList에 추가
        for (UserData value : subStudents) {
            listModel.addElement("이름: " + value.getName() + "    학과: " + value.getMajor() + "    userId: " + value.getUserId());
        }

        // JList에 모델 설정
        CourseSubStudentsList.setModel(listModel);
    }//GEN-LAST:event_CourseSubStudentsListAncestorAdded

    private void CourseSubStudentsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_CourseSubStudentsListValueChanged

        // 리스트에서 선택한 부분의 문자열을 가져온다.
        String selectedStudentNameAndNumber = CourseSubStudentsList.getSelectedValue();

        // fullString이 null인 경우, 즉 선택된 값이 없을 때 처리
        if (selectedStudentNameAndNumber == null) {
            return;  // 종료
        }

        String fullString = selectedStudentNameAndNumber;

        // 공백을 기준으로 문자열을 나눕니다. (주어진 구분자 "    "을 기준으로 나누기)
        String[] parts = fullString.split("    ");  // 공백 4개를 기준으로 분리

        // 배열의 길이가 4가 아닌 경우, 즉 필요한 데이터가 없다면 종료
        if (parts.length < 3) {
            JOptionPane.showMessageDialog(this, "선택된 학생 데이터가 올바르지 않습니다. 다시 선택해주세요.");
            return;  // 종료
        }

        // 각 항목을 분리하여 변수에 저장
        String name = parts[0].replace("이름: ", "").trim();  // 이름
        String major = parts[1].replace("학과:", "").trim();  // 학과
        String userId = parts[2].replace("userId:", "").trim(); // userId

        // 필수 데이터가 없다면 종료
        if (name.isEmpty() || major.isEmpty() || userId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "학생의 이름, 학과, 또는 userId가 누락되었습니다.");
            return;  // 종료
        }

        studentNameTextField.setText(name);
        studentMajorTextField.setText(major);
        studentUserIdTextField.setText(userId);

        // 내 학점 가져오기
        Object[] updateCourseUnitValues = usersFile.getAllJsonArrayValue("userId", userId, "courseList", "unit");

        // 학점 결과 계산 후 출력
        int unitSum = 0;
        for (Object unitValue : updateCourseUnitValues) {
            String valueStr = unitValue.toString();

            // 실수인 경우 Double.parseDouble로 변환 후 정수로 변환
            if (valueStr.contains(".")) {
                unitSum += (int) Double.parseDouble(valueStr);
            } else {
                // 정수인 경우 Integer.parseInt로 변환
                unitSum += Integer.parseInt(valueStr);
            }
        }
        studentTotalUnitTextField.setText(Integer.toString(unitSum));


        // 특정 조건에 따라 신청한 과 배열 값 가져와서 출력하
        Object[] courseValues = usersFile.getAllJsonArrayValue("userId", userId, "courseList", "course");

        // JList에 데이터를 설정하기 위한 DefaultListModel 생성
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (Object value : courseValues) {
            System.out.println(value.toString());
            listModel.addElement(value.toString());
        }

        // JList에 모델 설정
        studentSubCoursesList.setModel(listModel);

        // 필드 비활성화
        studentNameTextField.setEditable(false);
        studentMajorTextField.setEditable(false);
        studentTotalUnitTextField.setEditable(false);
        studentUserIdTextField.setEditable(false);
    }//GEN-LAST:event_CourseSubStudentsListValueChanged

    private void studentSubListFrameAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_studentSubListFrameAncestorAdded
        DefaultListModel<String> emptyModel = new DefaultListModel<>();
        emptyModel.addElement("학생을 선택 해 주세요");
        studentSubCoursesList.setModel(emptyModel);
        studentSubCoursesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        studentSubCoursesList.setEnabled(false);
    }//GEN-LAST:event_studentSubListFrameAncestorAdded

    private void submitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSubListFrameAncestorAdded
        String tuition = coursesPriceTextField.getText();

        // 필수 데이터가 없다면 종료
        if (tuition == null || tuition.isEmpty()) {
            JOptionPane.showMessageDialog(this, "청구 할 금액을 입력해 주세요.");
            return;  // 종료
        }

        // 값 가져오기
        String studentName = studentNameTextField.getText();
        String studentMajor = studentMajorTextField.getText();
        String studentUserId = studentUserIdTextField.getText();

        // 학생 이름 확인
        if (studentName == null || studentName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "학생의 이름이 누락되었습니다.\n학생을 다시 선택해 주세요.");
            return;  // 종료
        }

        // 학과 확인
        if (studentMajor == null || studentMajor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "학생의 학과가 누락되었습니다.\n학생을 다시 선택해 주세요.");
            return;  // 종료
        }

        // 사용자 ID 확인
        if (studentUserId == null || studentUserId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "학생의 사용자 ID가 누락되었습니다.\n학생을 다시 선택해 주세요.");
            return;  // 종료
        }

        // 저장 확인
        int result = JOptionPane.showConfirmDialog(
                this,
                "학비를 청구 하시겠습니까?",
                "저장 확인",
                JOptionPane.YES_NO_OPTION
        );

        // 사용자가 "예"를 선택한 경우에만 저장 실행
        if (result == JOptionPane.YES_OPTION) {
            // 학비는 문자열로 데이터에 저장됩니다.
            usersFile.addKeyAndValue("userId", studentUserId, "tuition", tuition);

            // 성공적으로 저장되었음을 사용자에게 알림
            JOptionPane.showMessageDialog(this, "청구 금액이 성공적으로 저장되었습니다.");
        } else {
            // 사용자가 "아니요"를 선택했을 때
            JOptionPane.showMessageDialog(this, "저장이 취소되었습니다.");
        }
    }//GEN-LAST:event_studentSubListFrameAncestorAdded

    private void managerNameTextFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_managerNameTextFieldAncestorAdded
        managerNameTextField.setText(managerName);

        // 필드 비활성화
        managerNameTextField.setEnabled(false);
    }//GEN-LAST:event_managerNameTextFieldAncestorAdded

    private void managerIdTextFieldAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_managerIdTextFieldAncestorAdded
        managerIdTextField.setText(managerId);

        // 필드 비활성화
        managerIdTextField.setEnabled(false);
    }//GEN-LAST:event_managerIdTextFieldAncestorAdded

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChargeTuitionFeeSystemForManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChargeTuitionFeeSystemForManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChargeTuitionFeeSystemForManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChargeTuitionFeeSystemForManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChargeTuitionFeeSystemForManager().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> CourseSubStudentsList;
    private javax.swing.JTextField coursesPriceTextField;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel managerIdLabel;
    private javax.swing.JTextField managerIdTextField;
    private javax.swing.JLabel managerNameLabel;
    private javax.swing.JTextField managerNameTextField;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel studentIdLabel;
    private javax.swing.JLabel studentMajorLabel;
    private javax.swing.JTextField studentMajorTextField;
    private javax.swing.JLabel studentNameLabel;
    private javax.swing.JTextField studentNameTextField;
    private javax.swing.JLabel studentSubCoursesLabel;
    private javax.swing.JList<String> studentSubCoursesList;
    private javax.swing.JTextField studentTotalUnitTextField;
    private javax.swing.JLabel studentUnitLabel;
    private javax.swing.JTextField studentUserIdTextField;
    private javax.swing.JLabel subCoursesListLabel;
    private javax.swing.JScrollPane subStudentCoursesScrollPane;
    private javax.swing.JScrollPane subStudentsScrollPane;
    private javax.swing.JButton submitPriceButton;
    private javax.swing.JLabel tuitionLabel;
    // End of variables declaration//GEN-END:variables
}